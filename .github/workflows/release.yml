on: 
  release:
    types: [published]

name: Release
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Install promu
      run: make promu

    - name: Cross build
      run: $HOME/go/bin/promu crossbuild

    - name: Upload release asset (linux/amd64)
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./.build/linux-amd64/cryptowat_exporter
        asset_name: cryptowat_exporter_${{ github.event.release.tag_name}}_linux_amd64
        asset_content_type: application/binary

    - name: Upload release asset (windows/amd64)
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./.build/windows-amd64/cryptowat_exporter.exe
        asset_name: cryptowat_exporter_${{ github.event.release.tag_name}}_windows_amd64
        asset_content_type: application/binary

    - name: Upload release asset (darwin/amd64)
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./.build/darwin-amd64/cryptowat_exporter
        asset_name: cryptowat_exporter_${{ github.event.release.tag_name}}_darwin_amd64
        asset_content_type: application/binary

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v2
      with:
          buildx-version: latest
          skip-cache: false
          qemu-version: latest

    - name: Docker login
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin

    - name: Run Docker Buildx
      run: |
        docker buildx build \
          --platform=linux/amd64,linux/arm64,linux/arm/v7 \
          --output "type=image,push=true" \
          --tag nbarrientos/cryptowat_exporter:latest \
          --tag nbarrientos/cryptowat_exporter:${GITHUB_REF#refs/tags/} \
          -f Dockerfile.cross .
